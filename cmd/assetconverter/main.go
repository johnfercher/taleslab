package main

import (
	"encoding/json"
	"fmt"
	"github.com/johnfercher/taleslab/internal/bytecompressor"
	"github.com/johnfercher/taleslab/pkg/slabconverter"
	"github.com/johnfercher/taleslab/pkg/talespire/talespirecoder"
)

func main() {
	slabToDecode := "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"

	compressor := bytecompressor.New()
	decoder := talespirecoder.NewDecoder(compressor)
	encoder := talespirecoder.NewEncoder(compressor)
	converter := slabconverter.New(decoder, encoder)

	convertedSlab, err := converter.ConvertToSlab(slabToDecode, "Name", "Type")
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	slabBytes, err := json.Marshal(convertedSlab)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	jsonString := string(slabBytes)

	fmt.Println(jsonString)

	//fmt.Println(decodedSlab)
	return
}
