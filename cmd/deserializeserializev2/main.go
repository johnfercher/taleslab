package main

import (
	"fmt"
	"github.com/johnfercher/taleslab/pkg/slabcompressor"
	"github.com/johnfercher/taleslab/pkg/slabdecoder"
	"log"
)

func main() {
	original := "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"

	slabCompressor := slabcompressor.New()
	decoder := slabdecoder.NewDecoder(slabCompressor)
	encoder := slabdecoder.NewEncoder(slabCompressor)

	slab, err := decoder.Decode(original)
	if err != nil {
		log.Fatal(err)
	}

	slabBase64, err := encoder.Encode(slab)
	if err != nil {
		log.Fatalln(err)
	}

	fmt.Println(slabBase64)
}
